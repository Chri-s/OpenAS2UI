@page "/certificates"
@using OpenAS2UI.Client.Shared
@inject HttpClient HttpClient
@inject NavigationManager navigationManager

<PageTitle>Certificates - OpenAS2</PageTitle>

<div class="
        d-flex
        justify-content-between
        flex-wrap flex-md-nowrap
        align-items-center
        pt-3
        pb-2
        mb-3
        border-bottom
      ">
    <h1><i class="fa-solid fa-key"></i> Certificates</h1>

    <div class="mr-2">
        <BSButtonGroup>
            <BSInput InputType="InputType.Text" InputSize="Size.Small" Value="customFilter" placeholder="Filter" Class="mr-2" ValueChanged="(string e) => CustomFilter(e)"></BSInput>
        </BSButtonGroup>

        <BSButtonGroup Class="mr-2">
            <BSButton DataId="btnRefresh" Color="BSColor.Secondary" Size="Size.Small" OnClick="UpdateData" IsDisabled="isLoading"><i class="fa-solid fa-rotate"></i></BSButton>
            <BSTooltip Target="btnRefresh" Placement="Placement.Bottom">Refresh</BSTooltip>

            @*Add the tooltip before the button. Otherwise the button won't get round corders because it is not the last element in the div*@
            <BSTooltip Target="btnNew" Placement="Placement.Bottom">Import certificate</BSTooltip>
            <BSLink IsButton="true" Url="/certificates/import/" Color="BSColor.Secondary" DataId="btnNew" Size="Size.Small"><i class="fa-solid fa-plus"></i></BSLink>
        </BSButtonGroup>
    </div>
</div>

<div>
    @if (isLoading)
    {
        <SpinnerRow />
    }
    else
    {
        @if (errorMsg == null)
        {
            <BSDataTable IsHoverable="true" IsResponsive="true" IsStriped="true" IsSmall="true" FetchItems="FetchItems" PaginationBottom="true" RowsPerPage="rowsPerPage" Context="item" @ref="table">
                <Header>
                    <BSDataTableHead TValue="CertificateDefinition" Sortable="true" Column="@(nameof(CertificateDefinition.Alias))">Alias</BSDataTableHead>
                    <BSDataTableHead TValue="CertificateDefinition" Sortable="true" Column="@(nameof(CertificateDefinition.NotAfter))">Expires</BSDataTableHead>
                    <BSDataTableHead TValue="CertificateDefinition" Class="col-1">Actions</BSDataTableHead>
                </Header>
                <Body>
                    <BSDataTableRow>
                        @{
                            string certificateViewUrl = $"/certificates/view/{Uri.EscapeDataString(item.Alias)}";
                        }
                        <BSTD>
                            @item.Alias
                            @if (item.HasPrivateKey)
                            {
                                <BSBadge IsPill="true" Color="BSColor.Secondary" title="Known private key" Class="ms-2"><i class="fa-solid fa-key" ></i></BSBadge>
                            }
                        </BSTD>
                        <BSTD>
                            @item.NotAfter.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")
                            @if (item.NotAfter < DateTimeOffset.Now)
                            {
                                <BSBadge Color="BSColor.Danger" IsPill="true" Class="ms-2">Expired</BSBadge>
                            }
                            else if (@item.NotAfter < DateTimeOffset.Now.AddMonths(1))
                            {
                                <BSBadge Color="BSColor.Warning" IsPill="true" Class="ms-2">Expires soon</BSBadge>
                            }
                        </BSTD>
                        <BSTD Class="col-1">
                            <BSLink Url="@certificateViewUrl" tooltip="View details"><i class="fa-solid fa-circle-info"></i></BSLink>
                        </BSTD>
                    </BSDataTableRow>
                </Body>
            </BSDataTable>

        }
        else
        {
            <BSAlert Color="BSColor.Danger" HasIcon="true">
                @errorMsg
            </BSAlert>
        }
    }
</div>

@code {
    private CertificateDefinition[] certificates = new CertificateDefinition[0];

    private BSDataTable<CertificateDefinition>? table;

    private bool isLoading = true;

    private const int rowsPerPage = 20;

    private string? customFilter = null;

    private string? errorMsg;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await this.UpdateData();
    }

    private async Task UpdateData()
    {
        isLoading = true;
        try
        {
            HttpResponseMessage msg = await HttpClient.GetAsync("api/certificate/");

            if (msg.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                errorMsg = "Could not connect to OpenAS2-server: " + await msg.Content.ReadAsStringAsync();
                isLoading = false;
                return;
            }

            msg.EnsureSuccessStatusCode();

            certificates = (await msg.Content.ReadFromJsonAsync<CertificateDefinition[]>())!;
        }
        catch (Exception ex)
        {
            errorMsg = "Error loading data: " + ex.Message;
            isLoading = false;
            return;
        }

        errorMsg = null;
        isLoading = false;
    }

    private void AddNewCertificate()
    {

    }

    private void CustomFilter(string e)
    {
        customFilter = e;
        table?.Refresh();
    }

    private Task<(IEnumerable<CertificateDefinition>, int)> FetchItems(DataRequest dataRequest)
    {
        IEnumerable<CertificateDefinition> data = this.certificates;

        if (!string.IsNullOrEmpty(customFilter))
        {
            data = data.Where(c => c.Alias.Contains(customFilter, StringComparison.InvariantCultureIgnoreCase));
        }

        data = data.ToList();
        int count = data.Count();

        if (dataRequest.SortColumnProperty != null)
        {
            if (dataRequest.Descending)
                data = data.OrderByDescending(c => dataRequest.SortColumnProperty.GetValue(c));
            else
                data = data.OrderBy(c => dataRequest.SortColumnProperty.GetValue(c));
        }

        data = data.Skip(dataRequest.Page * rowsPerPage).Take(rowsPerPage).ToList();
        return Task.FromResult((data, count));
    }
}
