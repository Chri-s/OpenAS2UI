@page "/partners/delete/{partnername}"
@inject DataService dataService
@inject StateContainer StateContainer
@inject IBlazorStrap _blazorStrap
@inject NavigationManager navigationManager

<BSToaster />

<div class="
        d-flex
        justify-content-between
        flex-wrap flex-md-nowrap
        align-items-center
        pt-3
        pb-2
        mb-3
        border-bottom
      ">
    <h1>@PartnerName - <span class="text-danger">Delete Partner</span></h1>
</div>

@if (errorMsg == null && partnerDefinition != null)
{
    <BSForm Model="partnerDefinition" IsRow="true" OnSubmit="DeletePartner">
        <div class="mb-3">
            <BSLabel>Name:</BSLabel>
            <BSInput InputType="InputType.Text" @bind-Value="partnerDefinition.Name" IsReadonly="true" aria-describedby="nameHelp" />
            <div id="nameHelp" class="form-text">The name is only used internally and not send to the partner.</div>
        </div>
        <div class="mb-3">
            <BSLabel>AS2 id:</BSLabel>
            <BSInput InputType="InputType.Text" @bind-Value="partnerDefinition.As2Id" IsReadonly="true" />
        </div>
        <div class="mb-3">
            <BSLabel>X509 alias:</BSLabel>
            <BSInput InputType="InputType.Text" @bind-Value="partnerDefinition.X509Alias" IsReadonly="true" />
        </div>
        <div class="mb-3">
            <BSLabel>X509 alias fallback:</BSLabel>
            <BSInput InputType="InputType.Text" @bind-Value="partnerDefinition.X509AliasFallback" IsReadonly="true" aria-describedby="x509AliasFallbackHelp" />
            <div id="x509AliasFallbackHelp" class="form-text">Optional. Support having 2 certificates for your partner definition. This allows switch over of your own certificate to be zero down time. See section "Overlapping Old And New Certificates When Changing" in the documentation.</div>
        </div>

        <div class="btn-toolbar mb-2 mb-md-0">
            <BSButtonGroup Class="mr-2">
                <BSButton Color="BSColor.Danger" IsSubmit="true">Delete Partner</BSButton>
                <BSButton IsOutlined="false" IsLink="true" OnClick="Cancel">Cancel</BSButton>
            </BSButtonGroup>
        </div>
    </BSForm>
}
else if (errorMsg != null)
{
    <BSAlert Color="BSColor.Danger" HasIcon="true">
        @errorMsg
    </BSAlert>
}

@code {
    private string? errorMsg;

    private bool isSubmitting = false;

    [Parameter]
    public string PartnerName { get; set; } = null!;

    private PartnerDefinition? partnerDefinition;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            partnerDefinition = await dataService.GetPartnerAsync(PartnerName);
        }
        catch (Exception ex)
        {
            errorMsg = "Error loading partner: " + ex.Message;
            return;
        }

        errorMsg = null;
    }

    private async void DeletePartner(EditContext e)
    {
        if (isSubmitting)
        {
            _blazorStrap.Toaster.Add("Can't delete partner, already submitting.", options => options.Color = BSColor.Danger);
            return;
        }

        isSubmitting = true;

        try
        {
            await dataService.DeletePartnerAsync(this.partnerDefinition!.Name);
            await dataService.StorePartnershipsAsync();

            navigationManager.NavigateTo("/partners");
        }
        catch (Exception ex)
        {
            _blazorStrap.Toaster.Add("Error deleting partner.", ex.Message, options => options.Color = BSColor.Danger);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/partners");
    }
}
